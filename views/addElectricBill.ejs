<%- include('partials/header') %>

<% 
  const isEditMode = bill && bill.id;
  const formAction = isEditMode ? `/electric/edit/${bill.id}` : '/electric/add';
  const currentBookingId = isEditMode ? bill.booking_id : selectedBookingId;
%>

<div class="container mt-4">
  <div class="card">
    <div class="card-header">
      <h2><%= isEditMode ? `Edit Electric Bill #${bill.sl_no || bill.id}` : 'Electric Bill Entry' %></h2>
    </div>
    <div class="card-body">
      <form action="<%= formAction %>" method="POST" id="electric-bill-form">
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="booking_id" class="form-label">Select Exhibitor</label>
            <select class="form-select" id="booking_id" name="booking_id" required>
              <option value="" disabled <%= !currentBookingId ? 'selected' : '' %>>-- Choose an Exhibitor --</option>
              <% bookings.forEach(b => { %>
                <option value="<%= b.id %>" <%= String(currentBookingId) === String(b.id) ? 'selected' : '' %>>
                  <%= b.exhibitor_name %> <% if (b.facia_name) { %>(<%= b.facia_name %>) <% } %>- [<%= b.space_name %>]
                </option>
              <% }) %>
            </select>
          </div>
          <div class="col-md-6">
            <label for="sl_no" class="form-label">Sl. No.</label>
            <input type="text" class="form-control" id="sl_no" name="sl_no" value="<%= isEditMode ? bill.sl_no || '' : '' %>">
          </div>
        </div>

        <!-- Existing Bills Section -->
        <div id="existing-bills-section">
          <hr>
          <h5>Existing Bills for Selected Exhibitor</h5>
          <table class="table table-sm table-striped">
            <thead class="table-light">
              <tr>
                <th>Sl. No</th>
                <th>Date</th>
                <th>Item</th>
                <th class="text-center">Quantity</th>
                <th class="text-end">Amount (₹)</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="existing-bills-tbody">
              <!-- Existing bills will be populated here -->
            </tbody>
          </table>
        </div>

        <hr>

        <h5>Bill Items</h5>
        <table class="table table-bordered">
          <thead class="table-light">
            <tr>
              <th style="width: 40%;">Item Name</th>
              <th style="width: 10%;">Quantity</th>
              <th style="width: 15%;" class="text-end">Service Charge (₹)</th>
              <th style="width: 15%;" class="text-end">Fitting Charge (₹)</th>
              <th style="width: 15%;" class="text-end">Total (₹)</th>
              <th style="width: 5%;">Action</th>
            </tr>
          </thead>
          <tbody id="items-container">
            <!-- Item rows will be added here by JavaScript -->
          </tbody>
        </table>
        <button type="button" id="add-item-btn" class="btn btn-secondary btn-sm">Add Item</button>

        <hr>

        <div class="row mt-3">
          <div class="col-md-8">
            <label for="remarks" class="form-label">Remarks</label>
            <textarea class="form-control" id="remarks" name="remarks" rows="3"><%= isEditMode ? bill.remarks || '' : '' %></textarea>
          </div>
          <div class="col-md-4">
            <label for="total_amount" class="form-label">Grand Total (₹)</label>
            <input type="number" class="form-control" id="total_amount" name="total_amount" value="<%= isEditMode ? bill.total_amount || 0 : 0 %>" readonly required>
          </div>
        </div>

        <!-- Hidden input to store the items as a JSON string -->
        <input type="hidden" name="items" id="items-json">

        <div class="mt-4">
          <button type="submit" class="btn btn-primary"><%= isEditMode ? 'Update Bill' : 'Save Bill' %></button>
          <a href="<%= isEditMode ? `/booking/details-full/${bill.booking_id}` : '/booking/list' %>" class="btn btn-secondary">Cancel</a>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
  /* Simple fade-in animation */
  .fade-in {
    animation: fadeIn 0.4s ease-in-out;
  }
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
</style>

<script>
  const isEditMode = <%- !!(bill && bill.id) %>;
  const existingItems = <%- JSON.stringify(isEditMode ? bill.items : []) %>;
  const currentBillId = <%- isEditMode ? bill.id : 'null' %>;

  document.addEventListener('DOMContentLoaded', function() {
    const itemsContainer = document.getElementById('items-container');
    const addItemBtn = document.getElementById('add-item-btn');
    const totalAmountInput = document.getElementById('total_amount');
    const itemsJsonInput = document.getElementById('items-json');
    const form = document.getElementById('electric-bill-form');
    const allItems = <%- JSON.stringify(items) %>;
    const bookingSelect = document.getElementById('booking_id');

    let itemCounter = 0;

    function createItemRow(existingItem = null) {
      const rowId = `item-row-${itemCounter++}`;
      const row = document.createElement('tr');
      row.className = 'item-row';
      row.id = rowId;

      const selectedItemId = existingItem ? existingItem.id : '';
      const quantity = existingItem ? existingItem.quantity : 1;

      row.innerHTML = `
        <td>
          <select class="form-select item-select" required>
            <option value="" disabled ${!selectedItemId ? 'selected' : ''}>-- Select Item --</option>
            ${allItems.map(item => `<option value="${item.id}" data-service-charge="${item.service_charge || 0}" data-fitting-charge="${item.fitting_charge || 0}" ${selectedItemId == item.id ? 'selected' : ''}>${item.name}</option>`).join('')}
          </select>
        </td>
        <td>
          <input type="number" class="form-control item-quantity" value="${quantity}" min="1" required>
        </td>
        <td>
          <input type="text" class="form-control text-end item-service-charge" readonly>
        </td>
        <td>
          <input type="text" class="form-control text-end item-fitting-charge" readonly>
        </td>
        <td>
          <input type="text" class="form-control text-end item-total" readonly>
        </td>
        <td class="text-center">
          <button type="button" class="btn btn-danger btn-sm" onclick="document.getElementById('${rowId}').remove(); calculateTotal();">X</button>
        </td>
      `;
      itemsContainer.appendChild(row);
    }

    function calculateTotal() {
      let grandTotal = 0;
      const itemsData = [];
      document.querySelectorAll('.item-row').forEach(row => {
        const select = row.querySelector('.item-select');
        const quantityInput = row.querySelector('.item-quantity');
        const serviceChargeInput = row.querySelector('.item-service-charge');
        const fittingChargeInput = row.querySelector('.item-fitting-charge');
        const totalInput = row.querySelector('.item-total');
        
        const selectedOption = select.options[select.selectedIndex];
        const serviceCharge = parseFloat(selectedOption.getAttribute('data-service-charge')) || 0;
        const fittingCharge = parseFloat(selectedOption.getAttribute('data-fitting-charge')) || 0;
        const quantity = parseInt(quantityInput.value) || 0;
        const itemTotal = (serviceCharge + fittingCharge) * quantity;
        
        totalInput.value = itemTotal.toFixed(2);
        serviceChargeInput.value = serviceCharge.toFixed(2);
        fittingChargeInput.value = fittingCharge.toFixed(2);

        grandTotal += itemTotal;

        if (selectedOption.value) {
          itemsData.push({
            id: selectedOption.value,
            name: selectedOption.text,
            quantity: quantity,
            service_charge: serviceCharge, // Add service charge
            fitting_charge: fittingCharge, // Add fitting charge
            total: itemTotal // Ensure the individual item total is included
          });
        }
      });
      totalAmountInput.value = grandTotal.toFixed(2);
      itemsJsonInput.value = JSON.stringify(itemsData);
    }

    addItemBtn.addEventListener('click', createItemRow);
    itemsContainer.addEventListener('change', calculateTotal);
    itemsContainer.addEventListener('input', calculateTotal);

    // --- Fetch and Display Existing Bills ---
    const existingBillsSection = document.getElementById('existing-bills-section');
    const existingBillsTbody = document.getElementById('existing-bills-tbody');

    async function fetchAndDisplayExistingBills(bookingId) {
      // Reset animation and show spinner
      existingBillsTbody.classList.remove('fade-in');
      existingBillsTbody.innerHTML = '';

      if (!bookingId) {
        existingBillsTbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">Please select an exhibitor to see existing bills.</td></tr>';
        return;
      }

      // Show spinner while fetching
      existingBillsTbody.innerHTML = `
        <tr>
          <td colspan="6" class="text-center text-muted py-3">
            <div class="spinner-border spinner-border-sm" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-2">Fetching existing bills...</span>
          </td>
        </tr>`;

      try {
        const response = await fetch(`/electric/for-booking/${bookingId}?_=${Date.now()}`);
        const bills = await response.json();
        
        // In edit mode, filter out the current bill. In add mode, show all.
        const billsToShow = isEditMode ? bills.filter(b => b.id !== currentBillId) : bills;
        
        existingBillsTbody.innerHTML = ''; // Clear spinner before populating

        if (billsToShow.length > 0) {
          billsToShow.forEach((bill, billIndex) => {
            const items = bill.items || [];

            // Add a separator between bills
            if (billIndex > 0) {
              const separatorRow = document.createElement('tr');
              separatorRow.innerHTML = `<td colspan="6" style="border-top: 2px solid #dee2e6;"></td>`;
              existingBillsTbody.appendChild(separatorRow);
            }

            items.forEach((item, itemIndex) => {
              const row = document.createElement('tr');
              row.innerHTML = `
                <td>${itemIndex === 0 ? (bill.sl_no || 'N/A') : ''}</td>
                <td>${itemIndex === 0 ? new Date(bill.bill_date).toLocaleDateString() : ''}</td>
                <td>${item.name}</td>
                <td class="text-center">${item.quantity}</td>
                <td class="text-end">${(item.total || 0).toFixed(2)}</td>
                <td>
                  ${itemIndex === 0 ? `
                    <a href="/electric/edit/${bill.id}" class="btn btn-sm btn-warning me-1">Edit</a>
                    <form action="/electric/delete/${bill.id}" method="POST" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this bill?');">
                      <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                    </form>
                  ` : ''}
                </td>
              `;
              existingBillsTbody.appendChild(row);
            });

            // Add a total row for each bill if it has items
            if (items.length > 0) {
              const totalRow = document.createElement('tr');
              totalRow.innerHTML = `
                <td colspan="4" class="text-end fw-bold">Bill Total</td>
                <td class="text-end fw-bold">${(bill.total_amount || 0).toFixed(2)}</td>
                <td></td>
              `;
              existingBillsTbody.appendChild(totalRow);
            }
          });
        } else {
          existingBillsTbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">No other bills found for this exhibitor.</td></tr>';
        }

        // Apply fade-in animation to the new content
        existingBillsTbody.classList.add('fade-in');
      } catch (error) {
        console.error('Error fetching existing bills:', error);
      }
    }

    bookingSelect.addEventListener('change', (e) => {
      fetchAndDisplayExistingBills(e.target.value);
    });

    // --- Initial Page Load Logic ---
    function initializePage() {
      // 1. Populate the bill items for the current bill (if in edit mode)
      if (isEditMode && existingItems.length > 0) {
        existingItems.forEach(item => createItemRow(item));
      } else {
        createItemRow(); // Or add one empty row for a new bill
      }
      calculateTotal(); // Calculate total for pre-populated or new row

      // 2. Fetch other bills for the currently selected exhibitor
      if (bookingSelect.value) {
        fetchAndDisplayExistingBills(bookingSelect.value);
      }
    }

    initializePage();
  });
</script>

<%- include('partials/footer') %>